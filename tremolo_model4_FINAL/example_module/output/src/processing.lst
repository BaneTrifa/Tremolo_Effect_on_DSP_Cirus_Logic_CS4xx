1     	 0000				_PROCESSING_ASM
2     						
3     						    .if defined (_PROCESSING_ASM)
4     					    .include "example_module_mcv.h"
4      >> open include file: C:/Users/tbran/Desktop/BRANKO/E2/1_FTN_E2/1_Fakultet/AA_DSP/Projekat/Tremolo_Effect_on_DSP_Cirus_Logic_CS4xx/tremolo_model4_FINAL/example_module/gen/inc/example_module_mcv.h
1+    						/*
2+    						 * This file is automatically generated by CLIDE
3+    						 *
4+    						 * MCV (Module Control Vector)
5+    						 */
6+    						.include "dsplib/meter_asm.h" 
6+     >> open include file: C:/CirrusDSP/include/dsplib/meter_asm.h
1+    							.if !defined(_meter_h_)
2+    	 0000				_meter_h_
3+    						
4+    						METER_T .struct
5+    						RMS .dw 0			#fract(1.31)
6+    						RMS_HOLD .dw 0		#fract(1.31)
7+    						PEAK .dw 0			#fract(1.31)
8+    						PEAK_HOLD .dw 0		#fract(1.31)
9+    							.endstruct
10+   						
11+   						(null)11+    >> end of include file: C:/CirrusDSP/include/dsplib/meter_asm.h
11+    >> continuing with file: C:/Users/tbran/Desktop/BRANKO/E2/1_FTN_E2/1_Fakultet/AA_DSP/Projekat/Tremolo_Effect_on_DSP_Cirus_Logic_CS4xx/tremolo_model4_FINAL/example_module/gen/inc/example_module_mcv.h
7+    						.include "dsplib/response_asm.h"
7+     >> open include file: C:/CirrusDSP/include/dsplib/response_asm.h
1+    							.if !defined(_response_h_)
2+    	 0000				_response_h_
3+    						
4+    						BIQUAD_T .struct
5+    						COEF_A1 .dw 0			#fract(2.30)
6+    						COEF_A2 .dw 0			#fract(2.30)
7+    						COEF_B0 .dw 1			#fract(3.29)
8+    						COEF_B1 .dw 0			#fract(3.29)
9+    						COEF_B2 .dw 0			#fract(3.29)
10+   							.endstruct
11+   						
12+   						RESPONSE_T .struct
13+   						PRE .dw 0			#fract(7.25)
14+   						POST .dw 0			#fract(7.25)
15+   							.rept %i = 0,2
16+   						BIQUAD_%i BIQUAD_T		#struct
17+    >> start of macro: .rept
1+    						BIQUAD_0 BIQUAD_T		#struct
2+    						BIQUAD_1 BIQUAD_T		#struct
3+    						BIQUAD_2 BIQUAD_T		#struct
4+    						
17+   							.endm
18+   							.endstruct
19+   							
20+   							.endif21+   						(null)21+    >> end of include file: C:/CirrusDSP/include/dsplib/response_asm.h
21+    >> continuing with file: C:/Users/tbran/Desktop/BRANKO/E2/1_FTN_E2/1_Fakultet/AA_DSP/Projekat/Tremolo_Effect_on_DSP_Cirus_Logic_CS4xx/tremolo_model4_FINAL/example_module/gen/inc/example_module_mcv.h
8+    						
9+    	 0001				isDefined	 .equ 	 1
10+   						
11+   						MCV_T	.struct
12+   						enable .dw 0	 # bool	non-zero to enable this function
13+   						input_gain .dw 0	 #fract(1.31)
14+   						headroom_gain .dw 0	 #fract(1.31)
15+   							.endstruct
16+   						
17+   						
18+   	 0000				STRUCTURE_INITIALIZATION_STRNG .equ "0x1, 0x00000000, 0x00000000"
19+    >> end of include file: C:/Users/tbran/Desktop/BRANKO/E2/1_FTN_E2/1_Fakultet/AA_DSP/Projekat/Tremolo_Effect_on_DSP_Cirus_Logic_CS4xx/tremolo_model4_FINAL/example_module/gen/inc/example_module_mcv.h
19+    >> continuing with file: C:/Users/tbran/Desktop/BRANKO/E2/1_FTN_E2/1_Fakultet/AA_DSP/Projekat/Tremolo_Effect_on_DSP_Cirus_Logic_CS4xx/tremolo_model4_FINAL/example_module/src/processing.a
5     						    
6     	 0010				_BLOCK_SIZE .equ 16
7     	 0000				_LEFT_CH .equ 0
8     	 0001				_RIGHT_CH .equ 1
9     	 0002				_CENTER_CH .equ 2
10    	 0003				_LS_CH .equ 3
11    	 0004				_RS_CH .equ 4
12    						
13    						
14    	 0000				    .public _processing
15    	 0000				    .extern _tremoloLeft
16    	 0000				    .extern _tremoloRight
17    	 0000				    .extern _LR_postGain
18    	 0000				    .extern _limiterThreshold
19    	 0000				    .extern example_module_MCV (MCV_T)
20    						
21    							.code_ovly
21     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
22    							
23    						     # prema CCC2 pozivnoj konvenciji: 
24    						     # i0 - parametar pokazivac, pIn
25    						     # i1 - parametar pokazivac, pOut
26    	 0000				_processing:
27    						
28    							// push on stack
29    	 0000	 82540017	  	xmem[i7] = x2; i7 += 1
30    	 0001	 83540017	    xmem[i7] = x3; i7 += 1
31    	 0002	 86540017	    xmem[i7] = y2; i7 += 1
32    	 0003	 87540017	    xmem[i7] = y3; i7 += 1
33    	 0004	 B2540017	    xmem[i7] = i2; i7 += 1
34    	 0005	 B3540017	    xmem[i7] = i3; i7 += 1
35    	 0006	 BA540017	    xmem[i7] = i6; i7 += 1
36    						
37    						
38    							
39    	 0007	 82050000		i2 = i0 + (_BLOCK_SIZE * _LEFT_CH)	// pointer to left channel
40    	 0008	 83050010		i3 = i0 + (_BLOCK_SIZE * _RIGHT_CH) // pointer to right channel
41    						
42    							// FIRST stage, apply input gain on L and R channels
43    							//for (i = 0; i < BLOCK_SIZE; i++)
44    	 0009	 81000011		do(_BLOCK_SIZE),>loop
45    							
46    								//	*L_CH_In_Ptr = (DSPfract)*L_CH_In_Ptr * input_gain;
47    	 000A	 80040000			x0 = xmem[example_module_MCV.input_gain] // load input_gain
48    	 000B	 84940002			y0 = ymem[i2]; 	// load *L_CH_In_Ptr
49    	 000C	 00002400			a0 = x0 * y0;
50    	 000D	 88D40012			ymem[i2] = a0; i2 += 1;
51    								
52    								//	*R_CH_In_Ptr = (DSPfract)*R_CH_In_Ptr * input_gain;
53    	 000E	 80040000			x0 = xmem[example_module_MCV.input_gain]
54    	 000F	 84940003			y0 = ymem[i3]
55    	 0010	 00002400			a0 = x0 * y0;
56    	 0011	 88D40013	%loop:	ymem[i3] = a0; i3 += 1;	// write result in L channel
57    							
58    							
59    	 0012	 82050000		i2 = i0 + (_BLOCK_SIZE * _LEFT_CH)	//L_CH_In_Ptr = *(pIn + LEFT_CH)
60    	 0013	 83050010		i3 = i0 + (_BLOCK_SIZE * _RIGHT_CH)	//R_CH_In_Ptr = *(pIn + RIGHT_CH)
61    						
62    							// SECOND stage, apply tremolo on Ls and Rs
63    							//processBlock(L_CH_In_Ptr, Ls_CH_Out_Ptr, &phLeft, tremolo_postGain);
64    	 0014	 84050000		i4 = i0 + (_BLOCK_SIZE * _LEFT_CH)	// first argument of the function
65    	 0015	 85050030		i5 = i0 + (_BLOCK_SIZE * _LS_CH)	// second argument of the function
66    	 0016	 80880000		call _tremoloLeft
67    							
68    							//processBlock(R_CH_In_Ptr, Rs_CH_Out_Ptr, &phRight, tremolo_postGain);
69    	 0017	 84050010		i4 = i0 + (_BLOCK_SIZE * _RIGHT_CH)	// first argument of the function
70    	 0018	 85050040		i5 = i0 + (_BLOCK_SIZE * _RS_CH)	// second argument of the function
71    	 0019	 80880000		call _tremoloRight
72    						
73    						
74    	 001A	 85050020		i5 = i0 + (_BLOCK_SIZE * _CENTER_CH)	//pointer to center channel, L_CH_In_Ptr = *(pIn + CENTER_CH)
75    							//for (int i = 0; i < BLOCK_SIZE; i++)
76    	 001B	 81000033		do(_BLOCK_SIZE),>loop
77    								
78    								// SECOND stage, sum L and R channels from first stage and apply headroom gain
79    								//accum_LR = (DSPfract) *L_CH_In_Ptr;
80    	 001C	 88940002			a0 = ymem[i2]	// load L sample
81    								//accum_R = (DSPfract)*R_CH_In_Ptr;
82    	 001D	 89940003			a1 = ymem[i3]	// load R sample
83    								//accum_LR = accum_LR + accum_R;
84    	 001E	 00004408			a0 = a0 + a1	// calculate sum of L and R channels
85    						
86    								//accum_LR >>= 1; scale sum by 2
87    	 001F	 00004E40			a0 = a0 >> 1
88    								//fract_mul = accum_LR;
89    	 0020	 48407FFF			x0 = a0
90    	 0021	 84040000			y0 = xmem[example_module_MCV.headroom_gain] // load headroomgain from MCV table
91    								//accum_LR = fract_mul * headroom_gain;
92    	 0022	 00002400			a0 = x0 * y0	// multiply sum of L and R channels with headroom gain
93    						
94    								//accum_saturation = accum_LR << 1;
95    	 0023	 48497FFF			a1 = a0			// save scaled value in a1
96    	 0024	 00004E00			a0 = a0 << 1	// rescale by 2
97    								
98    								// *C_CH_Out_Ptr = saturation(accum_saturation);
99    	 0025	 8C040000			b0 = xmem[_limiterThreshold]
100   	 0026	 00004860			if (b0 < a0) a0 = b0	// check saturation for upper bound
101   								
102   	 0027	 00004C84			b0 = -b0
103   	 0028	 00004820			if (b0 > a0) a0 = b0	// check saturation for lower bound
104   						
105   								// write saturated value in center channel
106   	 0029	 88D40015			ymem[i5] = a0; i5 += 1
107   						
108   								// THIRD stage, apply post gain on L and R channels (-6dB)
109   								//fract_mul = accum_LR;
110   	 002A	 49407FFF			x0 = a1	// using scaled value from line 95
111   	 002B	 84040000			y0 = xmem[_LR_postGain]
112   								//accum_LR = fract_mul * LR_postGain;
113   	 002C	 00002400			a0 = x0 * y0
114   								
115   								//accum_LR <<= 1; rescale value by 2
116   	 002D	 00004E00			a0 = a0 << 1
117   						
118   								// *L_CH_Out_Ptr = saturation(accum_LR);
119   	 002E	 8C040000			b0 = xmem[_limiterThreshold]
120   	 002F	 00004860			if (b0 < a0) a0 = b0	// check saturation for upper bound
121   								
122   	 0030	 00004C84			b0 = -b0
123   	 0031	 00004820			if (b0 > a0) a0 = b0	// check saturation for lower bound
124   								
125   	 0032	 88D40012			ymem[i2] = a0; i2 += 1	// *L_CH_Out_Ptr = a0, write output sample in L channel
126   								
127   								// *R_CH_Out_Ptr = (DSPfract)*L_CH_Out_Ptr;
128   	 0033	 88D40013	%loop:	ymem[i3] = a0; i3 += 1 // write output sample in R channel
129   						
130   						
131   						
132   							// pop from stack
133   	 0034	 02177FFF		i7 -= 1
134   	 0035	 BA140027	   	i6 = xmem[i7]; i7 -= 1
135   	 0036	 B3140027	   	i3 = xmem[i7]; i7 -= 1
136   	 0037	 B2140027	   	i2 = xmem[i7]; i7 -= 1
137   	 0038	 87140027	   	y3 = xmem[i7]; i7 -= 1
138   	 0039	 86140027	   	y2 = xmem[i7]; i7 -= 1
139   	 003A	 83140027	   	x3 = xmem[i7]; i7 -= 1
140   	 003B	 82140007	   	x2 = xmem[i7]
141   							
142   						
143   	 003C	 81880000	    ret
144   						    
145   						    .endif
146   						    
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

STRUCTURE_INITIALIZATION_STRNG                                                  			  Unused String		   '0x1, 0x00000000, 0x00000000' 
_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_CENTER_CH                                                                      					 Number				          2 (2H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           			  Unused Variable		        0 (0H)
_LEFT_CH                                                                        					 Number				         0 (0H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_LR_postGain                                                                    					 External   
_LS_CH                                                                          					 Number				          3 (3H)
_PROCESSING_ASM                                                                 			  Unused Relocatable        __INIT:0000H
_RIGHT_CH                                                                       					 Number				          1 (1H)
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_RS_CH                                                                          					 Number				          4 (4H)
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
_limiterThreshold                                                               					 External   
_meter_h_                                                                       			  Unused Relocatable        __INIT:0000H
_processing                                                                     			  Public Relocatable       processing_GEN_0000:0000H
_response_h_                                                                    			  Unused Relocatable        __INIT:0000H
_tremoloLeft                                                                    					 External   
_tremoloRight                                                                   					 External   
example_module_MCV                                                              					 External   
isDefined                                                                       			  Unused Number				      1 (1H)

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
003DH	 processing_GEN_0000                     			 CODE_OVLY                               
