_PROCESSING_ASM

    .if defined (_PROCESSING_ASM)
    
_BLOCK_SIZE .equ 16
_LEFT_CH .equ 0
_RIGHT_CH .equ 1
_CENTER_CH .equ 2
_LS_CH .equ 3
_RS_CH .equ 4


    .public _processing
    .extern _tremoloLeft
    .extern _tremoloRight
    .extern _input_gain
    .extern _headroom_gain
    .extern _LR_postGain
    .extern _limiterThreshold

	.code_ovly
	
     # prema CCC2 pozivnoj konvenciji: 
     # i0 - parametar pokazivac, pIn
     # i1 - parametar pokazivac, pOut
_processing:

	// push on stack
    xmem[i7] = x2; i7 += 1
    xmem[i7] = x3; i7 += 1
    xmem[i7] = y2; i7 += 1
    xmem[i7] = y3; i7 += 1
    xmem[i7] = i2; i7 += 1
    xmem[i7] = i3; i7 += 1
    xmem[i7] = i6; i7 += 1

	
	i2 = i0 + (_BLOCK_SIZE * _LEFT_CH)	// pointer to left channel
	i3 = i0 + (_BLOCK_SIZE * _RIGHT_CH) // pointer to right channel

	// FIRST stage, apply input gain on L and R channels
	//for (i = 0; i < BLOCK_SIZE; i++)
	do(_BLOCK_SIZE),>loop
	
		//	*L_CH_In_Ptr = (DSPfract)*L_CH_In_Ptr * input_gain;
		x0 = xmem[_input_gain]	// *L_CH_In_Ptr
		y0 = ymem[i2]; 	// input_gain
		a0 = x0 * y0;
		ymem[i2] = a0; i2 += 1;	// write result in L channel
		
		//	*R_CH_In_Ptr = (DSPfract)*R_CH_In_Ptr * input_gain;
		x0 = xmem[_input_gain]	// input_gain
		y0 = ymem[i3]	// *R_CH_In_Ptr
		a0 = x0 * y0;	
%loop:	ymem[i3] = a0; i3 += 1;	// write result in R channel
	
	
	// Reposition pointers to L and R channels
	i2 = i0 + (_BLOCK_SIZE * _LEFT_CH)	//L_CH_In_Ptr = *(pIn + LEFT_CH)
	i3 = i0 + (_BLOCK_SIZE * _RIGHT_CH)	//R_CH_In_Ptr = *(pIn + RIGHT_CH)


	// SECOND stage, apply tremolo on Ls and Rs
	//processBlock(L_CH_In_Ptr, Ls_CH_Out_Ptr, &phLeft, tremolo_postGain);
	i4 = i0 + (_BLOCK_SIZE * _LEFT_CH)	// first argument of the function
	i5 = i0 + (_BLOCK_SIZE * _LS_CH)	// second argument of the function
	call _tremoloLeft
	
	//processBlock(R_CH_In_Ptr, Rs_CH_Out_Ptr, &phRight, tremolo_postGain);
	i4 = i0 + (_BLOCK_SIZE * _RIGHT_CH)	// first argument of the function
	i5 = i0 + (_BLOCK_SIZE * _RS_CH)	// first argument of the function
	call _tremoloRight



	i5 = i0 + (_BLOCK_SIZE * _CENTER_CH)	//pointer to center channel C_CH_In_Ptr = *(pIn + CENTER_CH)

	do(_BLOCK_SIZE),>loop
		
		// SECOND stage, sum L and R channels from first stage and apply headroom gain
		//accum_LR = (DSPfract) *L_CH_In_Ptr;
		a0 = ymem[i2]
		//accum_R = (DSPfract)*R_CH_In_Ptr;
		a1 = ymem[i3]
		//accum_LR = accum_LR + accum_R;
		a0 = a0 + a1

		//accum_LR >>= 1;
		a0 = a0 >> 1
		//fract_mul = accum_LR;
		x0 = a0
		y0 = xmem[_headroom_gain]
		//accum_LR = fract_mul * headroom_gain;
		a0 = x0 * y0

		//accum_saturation = accum_LR << 1;
		a1 = a0
		a0 = a0 << 1
		
		// *C_CH_Out_Ptr = saturation(accum_saturation);
		b0 = xmem[_limiterThreshold]
		if (b0 < a0) a0 = b0
		
		b0 = -b0
		if (b0 > a0) a0 = b0

		// write saturated value in center channel
		ymem[i5] = a0; i5 += 1

		// THIRD stage, apply post gain on L and R channels (-6dB)
		//fract_mul = accum_LR;
		x0 = a1
		y0 = xmem[_LR_postGain]
		//accum_LR = fract_mul * LR_postGain;
		a0 = x0 * y0
		
		//accum_LR <<= 1;
		a0 = a0 << 1

		// *L_CH_Out_Ptr = saturation(accum_LR);
		b0 = xmem[_limiterThreshold]
		if (b0 < a0) a0 = b0
		
		b0 = -b0
		if (b0 > a0) a0 = b0
		
		ymem[i2] = a0; i2 += 1	// *L_CH_Out_Ptr = a0
		
		// *R_CH_Out_Ptr = (DSPfract)*L_CH_Out_Ptr;
%loop:	ymem[i3] = a0; i3 += 1



	// pop from stack
	i7 -= 1
   	i6 = xmem[i7]; i7 -= 1
   	i3 = xmem[i7]; i7 -= 1
   	i2 = xmem[i7]; i7 -= 1
   	y3 = xmem[i7]; i7 -= 1
   	y2 = xmem[i7]; i7 -= 1
   	x3 = xmem[i7]; i7 -= 1
   	x2 = xmem[i7]
	

    ret
    
    .endif
    